"rgeos",
"tools",
"openxlsx",
"stringr",
)
new.packages <-
packages.loading[!(packages.loading %in% installed.packages()[, "Package"])]
if (length(new.packages))
install.packages(new.packages, dependencies = TRUE, repos = "https://cloud.r-project.org/", quiet=TRUE)
# Install all packages from CRAN that are used by rSIF
packages.loading <-
c(
"rgdal",
"raster",
"terra",
"dplyr",
"magrittr",
"argparser",
"installr",
"contourR",
"sp",
"rgeos",
"tools",
"openxlsx",
"stringr"
)
new.packages <-
packages.loading[!(packages.loading %in% installed.packages()[, "Package"])]
if (length(new.packages))
install.packages(new.packages, dependencies = TRUE, repos = "https://cloud.r-project.org/", quiet=TRUE)
install.packages("contoureR")
.libPaths(  )
Sys.getenv()
library(devtools)
library(devtools)
.libPaths
.libPaths()
library(devtools)
library(idf)
library(idf)
setwd("C:/Users/NLCIMM/OneDrive/Documenten/myR_on_GitHub/packages/idf/R")
x <- "bot2.idf"
file.exists(x)
library(raster)
library(devtools)
load_all()
load_all()
x
con = file(x, "rb")
vars = readBin(con,
integer(),
n = 3,
size = 4,
endian = "little")
lrl_id = vars[1] #
lrl_id
x <- "bot3.idf"
file.exists(x)
con = file(x, "rb")
vars = readBin(con,
integer(),
n = 3,
size = 4,
endian = "little")
lrl_id = vars[1] # Lahey Record Length Identifi
lrl_id
x <- "bot2.idf"
con = file(x, "rb")
vars = readBin(con,
integer(),
n = 3,
size = 4,
endian = "little")
lrl_id = vars[1]
lrl_id
r <- read_raster(x)
str(r)
write_raster(r,"test.idf")
x <- "test.idf"
con = file(x, "rb")
vars = readBin(con,
integer(),
n = 3,
size = 4,
endian = "little")
lrl_id = vars[1] # Lahey Record Length Identification; 1271 is a single precision IDF, 2296 a double precision.
lrl_id
.libPaths()
library("idf")
con = file(x, "rb")
vars = readBin(con,
integer(),
n = 3,
size = 4,
endian = "little")
lrl_id = vars[1] # Lahey Record Length Identification; 1271 is a single precision IDF, 2296 a double precision.
lrl_id
write_raster(r,"test2.idf")
x <- "test2.idf"
con = file(x, "rb")
vars = readBin(con,
integer(),
n = 3,
size = 4,
endian = "little")
lrl_id = vars[1] # Lahey Record Length Identif
lrl_id
getwd()
x <- "2.idf"
file.exists(x)
setwd("C:/Users/NLCIMM/OneDrive/Documenten/myR_on_GitHub/packages/idf/R")
file.exists(x)
con = file(x, "rb")
vars = readBin(con,
integer(),
n = 3,
size = 4,
endian = "little")
lrl_id = vars[1] # Lahey Record
lrl_id
con = file(x, "rb")
vars = readBin(con,
integer(),
n = 3,
size = 4,
endian = "little")
lrl_id = vars[1] #
lrl_id
library(devtools)
library(devtools)
library(idf)
getwd()
setwd("C:/Users/NLCIMM/OneDrive/Documenten/myR_on_GitHub/packages/idf/R")
x <- "2.idf"
file.exists(x)
con = file(x, "rb")
vars = readBin(con,
integer(),
n = 3,
size = 4,
endian = "little")
lrl_id = vars[1]
lrl_id
r <- read_raster(x)
write_raster(r,"test.idf")
x <- "test.idf"
file.exists("test.idf")
if ((typeof(x) == "character") &
(.is_idf_extension(fileutils::get_filename_extension(x)))) {
if (missing(crs)) {
crs <- sp::CRS("+init=epsg:28992")
}
reslt <- .read.idf(x, crs)
} else {
reslt <- suppressWarnings(raster::raster(x, ...))
if (!missing(crs)) {  # Force crs if explicitly specified
raster::crs(reslt) <- sp::CRS("+init=epsg:28992")
}
}
.is_idf_extension <- function( ext ) {
toupper(ext) == ".IDF"
}
if ((typeof(x) == "character") &
(.is_idf_extension(fileutils::get_filename_extension(x)))) {
if (missing(crs)) {
crs <- sp::CRS("+init=epsg:28992")
}
reslt <- .read.idf(x, crs)
} else {
reslt <- suppressWarnings(raster::raster(x, ...))
if (!missing(crs)) {  # Force crs if explicitly specified
raster::crs(reslt) <- sp::CRS("+init=epsg:28992")
}
}
crs <- sp::CRS("+init=epsg:28992")
reslt <- .read.idf(x, crs)
.read.idf <- function(x, crs=sp::CRS("+init=epsg:28992")) {
con = file(x, "rb")
vars = readBin(con,
integer(),
n = 3,
size = 4,
endian = "little")
lrl_id = vars[1] # Lahey Record Length Identification; 1271 is a single precision IDF, 2296 a double precision.
ncol = vars[2]
nrow = vars[3]
vars = readBin(con,
double(),
n = 7,
size = 4,
endian = "little")
xll = vars[1]
xur = vars[2]
yll = vars[3]
yur = vars[4]
minval = vars[5]
maxval = vars[6]
nodata = vars[7]
vars = readBin(con,
logical(),
n = 4,
size = 1,
endian = "little")
ieq = vars[1]
itb = vars[2]
if (ieq |
itb)
stop("Non-equidistant IDF's or IDF's with tops and bottoms not supported yet...")
vars = readBin(con,
double(),
n = 2,
size = 4,
endian = "little")
dx = vars[1]
dy = vars[2]
data = readBin(con,
double(),
n = ncol * nrow,
size = 4,
endian = "little")
data = matrix(data,
nrow = nrow,
ncol = ncol,
byrow = TRUE)
close(con)
layer <-
raster::raster(
nrows = nrow,
ncols = ncol,
xmn = xll,
xmx = xur,
ymn = yll,
ymx = yur,
crs = crs
)
raster::NAvalue(layer) <- nodata
layer[] <- data
names(layer) <- fileutils::bare_filename(x)
return(layer)
}
reslt <- .read.idf(x, crs)
con = file(x, "rb")
vars = readBin(con,
integer(),
n = 3,
size = 4,
endian = "little")
lrl_id = vars[1] # Lahey R
lrl_id
library(devtools)
load_all()
setwd("C:/Users/NLCIMM/OneDrive/Documenten/myR_on_GitHub/packages/idf/R")
x <- "2.idf"
file.exists(x)
con = file(x, "rb")
vars = readBin(con,
integer(),
n = 3,
size = 4,
endian = "little")
lrl_id = vars[1] # Lahey R
lrl_id
getwd()
library(idf)
library(fileutils)
?fileutils
suppressPackageStartupMessages(library(rgdal))     # CRAN library
suppressPackageStartupMessages(library(raster))    # CRAN library
suppressPackageStartupMessages(library(dplyr))     # CRAN library
suppressPackageStartupMessages(library(magrittr))  # CRAN library
suppressPackageStartupMessages(library(argparser)) # CRAN library
suppressPackageStartupMessages(library(idf))       # User defined library
suppressPackageStartupMessages(library(fileutils))    # User defined library
setwd("C:/Users/NLCIMM/OneDrive/Documenten/myR_NOT_on_GitHub/rSIF/EXE/rSIF/examples/01 Export IDFs")
doClip <- FALSE
constant <- 1
saveRasterAs <- function( NamFile, aExt=".tif", doClip=FALSE, overwrite=TRUE, constant=1) {
x <- idf::read_raster( NamFile )
if (doClip) {
e <- raster::extent(CLIPXLL, CLIPXUR, CLIPYLL, CLIPYUR)
x %<>% crop(e)
}
if (constant!=1) {
x[] <- x[] * constant
}
print(NamFile)
new_filename <- fileutils::change_filename_extension( a_filename=NamFile, new_ext=aExt )
new_filename <- paste0(RESULTPATH,"\\",new_filename)
idf::write_raster( Lay=x, NamFil=new_filename, overwrite = TRUE )
print(paste("File [",new_filename,"] created."))
}
filenames <- readLines("exportIDFs.inp")
filenames
x <-
mapply(
saveRasterAs,
filenames,
aExt = ext,
doClip = doClip,
overwrite = TRUE,
constant=constant
)
ext <- ".idf"
x <-
mapply(
saveRasterAs,
filenames,
aExt = ext,
doClip = doClip,
overwrite = TRUE,
constant=constant
)
RESULTPATH <- "resultaat"
x <-
mapply(
saveRasterAs,
filenames,
aExt = ext,
doClip = doClip,
overwrite = TRUE,
constant=constant
)
filenames
NamFile <- filenames[1]
NamFile
x <- idf::read_raster( NamFile )
if (doClip) {
e <- raster::extent(CLIPXLL, CLIPXUR, CLIPYLL, CLIPYUR)
x %<>% crop(e)
}
if (constant!=1) {
x[] <- x[] * constant
}
print(NamFile)
new_filename <- fileutils::change_filename_extension( a_filename=NamFile, new_ext=aExt )
aExt <- ".idf"
new_filename <- fileutils::change_filename_extension( a_filename=NamFile, new_ext=aExt )
new_filename
new_filename <- paste0(RESULTPATH,"\\",new_filename)
idf::write_raster( Lay=x, NamFil=new_filename, overwrite = TRUE )
new_filename <- NamFile %>% bare_filename() %>% paste0(RESULTPATH,"\\",aExt)
new_filename
NamFile
new_filename <- NamFile %>% bare_filename() %>% paste0(RESULTPATH,"\\",.,aExt)
new_filename
library(devtools)
setwd("C:/Users/NLCIMM/OneDrive/Documenten/myR_on_GitHub/packages/idf/R")
x <- "2.idf"
con = file(x, "rb")
vars = readBin(con,
integer(),
n = 3,
size = 4,
endian = "little")
lrl_id = vars[1] # La
lrl_id
library(idf)
library(raster)
?writeRaster
library(devtools)
?extend
use_package("magrittr")
raster::crop
?raster::crop()
library(idf)
library(devtools)
use_package(terra)
use_package("terra")
library(fileutils)
?fileutils
?terra::`values<-`()
load_all()
?idf
?read_raster()
f <- system.file("extdata", "test.idf", package="idf")
f
r <- read_raster(f)
terra::plot(r)
?write_raster()
write_raster(r, "test.tif")
load_all()
write_raster(r, "test.tif")
load_all()
write_raster(r, "test.tif")
load_all()
write_raster(r, "test.tif")
write_raster(r, "test.tif")
terra::plot(r)
filename <- "2.idf"
file.exists(filename)
x <- read_raster(filename)
raster::plot(x)
terra::writeRaster(x, "test.tif")
fileutils::get_filename_extension(filename)
is.null(e)
write_raster(x, "test.tif")
filename <- "test.tif"
con = file(filename, "wb")
ncols <- terra::ncol(x)
nrows <- terra::nrow(x)
xll <- terra::xmin(x)
xur <- terra::xmax(x)
xlr <- terra::ymin(x)
yur <- terra::ymax(x)
mindata <- terra::minmax(x)[1]
maxdata <- terra::minmax(x)[2]
NAflg <- terra::NAflag(x)
writeBin(as.integer(c(1271, ncols, nrows)),
con,
size = 4,
endian = "little")
writeBin(
c(
xll,
xur,
xlr,
yur,
mindata,
maxdata,
NAflg
),
con,
size = 4,
endian = "little"
)
writeBin(as.integer(0),
con,
size = 4,
endian = "little")
load_all()
filename<- "2.idf"
x <- read_raster()
x <- read_raster(filename)
terra::plot(x)
write_raster(x, "test.tif")
load_all()
write_raster(x, "test.tif")
write_raster(x, "test.tif",overwrite=TRUE)
write_raster(x, "test", filetype="BMP", overwrite=TRUE)
?terra::writeRaster()
write_raster(x, "test", filetype="ASC", overwrite=TRUE)
write_raster(x, "test", filetype="TIF", overwrite=TRUE)
write_raster(x, filename="test", filetype="TIF")
write_raster(x, filename="test", filetype="BMP")
write_raster(x, filename="test.BMP", filetype="BMP")
x
terra::writeRaster(x, "test2", filetype="BMP")
terra::writeRaster(x, "test2", filetype="tif")
terra::writeRaster(x, "test2", filetype="TIF")
terra::writeRaster(x, "test2", filetype="R")
terra::writeRaster(x, "test2", filetype="ASC")
terra::writeRaster(x, "test2.asc")
library(idf)
library(devtools)
load_all()
?terra::writeRaster()
?terra::rast
?terra::`crs,SpatRaster-method`
?terra::rast()
document()
library(devtools)
library(idf)
?idf
?write_raster
install.packages("roxygen2")
?stop
library(devtools)
is.double(1)
is.single(1)
library(devtools)
load_all()
?load_all()
library(idf)
?idf
?read_raster
f <- system.file("extdata", "test.idf", package="idf")
r <- read_raster(f)
?write_raster()
write_raster(r, "c://tmp//test.idf",overwrite=TRUE)
library(devtools)
load_all()
?idf
?read_raster()
f <- system.file("extdata", "test.idf", package="idf")
r <- read_raster(f)
is.single(1)
?terra
terra::res(r)
str(terra::res(r))
is.double(terra::res(r)[1])
load_all()
library(idf)
library(idf)
library(devtools)
use_github_actions()
library(devtools)
load_all()
?idf
library(idf)
?idf
?.libPaths()
.libPaths()
.libPaths()
library(idf)
?idf
libPaths()
libPath()
.libPaths()
.LibPaths()
.libPaths()
.libPaths()
.libPaths()
